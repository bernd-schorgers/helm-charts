name: "Charts: Test"

on:
  workflow_call:
    inputs:
      checkoutCommit:
        required: true
        type: string
      chartChanges:
        required: true
        type: string

env:
  HELM_VERSION: 3.9.2

jobs:
  generate-test-matrix:
    name: Generate matrix for install
    runs-on: ubuntu-22.04
    outputs:
      install-matrix: |
        {
          "chart": ${{ steps.list-changed.outputs.charts }},
          "k8s_version": ["v1.22.12", "v1.24.3"]
        }
      unittest-matrix: |
        {
          "chart": ${{ steps.list-changed.outputs.charts }}
        }
      detected: ${{ steps.list-changed.outputs.detected }}
      common-updated: ${{ steps.list-changed.outputs.common-updated }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.checkoutCommit }}

      - name: Install prerequisites
        if: inputs.chartChanges != ''
        run: |
          npm install yaml@~2.1.1

      - uses: actions/github-script@v6
        id: list-changed
        if: inputs.chartChanges != ''
        env:
          CHART_CHANGES: "${{ inputs.chartChanges }}"
        with:
          script: |
            const fs = require('fs');
            const YAML = require('yaml');

            const chartChanges = process.env.CHART_CHANGES.split(" ");

            const ctConfigRaw = fs.readFileSync('.ci/ct/ct.yaml', "utf8");
            const ctConfig = YAML.parse(ctConfigRaw);

            const excludedCharts = ctConfig["excluded-charts-install"];
            const chartsToInstall = chartChanges.filter(x => !excludedCharts.includes(x))

            console.log(`Charts with changes: ${JSON.stringify(chartChanges, undefined, 2)}`);
            console.log(`Excluded charts: ${JSON.stringify(excludedCharts, undefined, 2)}`);
            console.log(`Charts to install: ${JSON.stringify(chartsToInstall, undefined, 2)}`);
            core.setOutput('charts', chartsToInstall);
            core.setOutput('detected', (chartsToInstall.length > 0));

  install-chart:
    needs:
      - generate-test-matrix
    if: needs.generate-test-matrix.outputs.detected == 'true'
    name: Install chart
    strategy:
      matrix: ${{ fromJson(needs.generate-test-matrix.outputs.install-matrix) }}
      fail-fast: false
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.checkoutCommit }}

      - name: Install Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.8.2
        with:
          setup-tools: |
            helmv3
            kubectl
          helm: "${{ env.HELM_VERSION }}"
          kubectl: "${{ matrix.k8s_version }}"

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.2.1

      - name: Create k3d cluster
        uses: nolar/setup-k3d-k3s@v1
        with:
          version: ${{ matrix.k8s_version }}

      - name: Remove node taints
        run: |
          kubectl taint --all=true nodes node.cloudprovider.kubernetes.io/uninitialized- || true

      - name: Run chart-testing (install)
        run: ct install --config .ci/ct/ct.yaml --charts "charts/${{ matrix.chart }}"

  # Summarize matrix https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  install_success:
    needs:
      - generate-test-matrix
      - install-chart
    if: |
      always()
    name: Install successful
    runs-on: ubuntu-22.04
    steps:
      - name: Check install matrix status
        if: ${{ (needs.generate-test-matrix.outputs.detected == 'true') && (needs.install-chart.result != 'success') }}
        run: exit 1

  unittest-chart:
    name: Unit-test chart
    runs-on: ubuntu-20.04
    needs:
      - generate-test-matrix
    if: needs.generate-test-matrix.outputs.detected == 'true'
    strategy:
      matrix: ${{ fromJson(needs.generate-test-matrix.outputs.unittest-matrix) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.checkoutCommit }}

      - name: Install Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.8.2
        with:
          setup-tools: |
            helmv3
          helm: "${{ env.HELM_VERSION }}"

      - name: Run tests
        run: |
          helm plugin install https://github.com/vbehar/helm3-unittest --version v1.0.16
          cd "charts/${{ matrix.chart }}"
          helm dep update
          helm unittest -f "tests/**/*_test.yaml" .

  # Summarize matrix https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  unittest_success:
    needs:
      - generate-test-matrix
      - unittest-chart
    if: |
      always()
    name: Unittest successful
    runs-on: ubuntu-22.04
    steps:
      - name: Check unittest matrix status
        if: ${{ (needs.generate-test-matrix.outputs.detected == 'true') && (needs.unittest-chart.result != 'success') }}
        run: exit 1
